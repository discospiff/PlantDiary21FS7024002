// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using specimenfeed;
//
//    var specimen = Specimen.FromJson(jsonString);

namespace specimenfeed
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Specimen
    {
        [JsonProperty("specimens")]
        public SpecimenElement[] Specimens { get; set; }
    }

    public partial class SpecimenElement
    {
        [JsonProperty("lat")]
        public double Lat { get; set; }

        [JsonProperty("lng")]
        public double Lng { get; set; }

        [JsonProperty("plant_id")]
        public long PlantId { get; set; }

        [JsonProperty("specimen_id")]
        public long SpecimenId { get; set; }

        [JsonProperty("common")]
        public string Common { get; set; }

        [JsonProperty("genus")]
        public string Genus { get; set; }

        [JsonProperty("species")]
        public string Species { get; set; }

        [JsonProperty("address")]
        public string Address { get; set; }

        [JsonProperty("notes")]
        public string Notes { get; set; }
    }

    public partial class Specimen
    {
public static Specimen FromJson(string json) => JsonConvert.DeserializeObject<Specimen>(json, specimenfeed.Converter.Settings);
}

    public static class Serialize
    {
        public static string ToJson(this Specimen self) => JsonConvert.SerializeObject(self, specimenfeed.Converter.Settings);
}

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
