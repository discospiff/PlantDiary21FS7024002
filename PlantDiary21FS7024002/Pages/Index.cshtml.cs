using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Logging;
using plantfeed;
using specimenfeed;
using weatherfeed;

namespace PlantDiary21FS7024002.Pages
{
    public class IndexModel : PageModel
    {
        private readonly ILogger<IndexModel> _logger;

        public IndexModel(ILogger<IndexModel> logger)
        {
            _logger = logger;
        }

        public void OnGet()
        {
            string brandName = Request.Query["BrandName"];
            if (brandName == null || brandName.Length == 0) 
            {

                int yearStarted = 2006;
                brandName = "My Plant Diary, Established " + yearStarted;
            }
            ViewData["BrandName"] = brandName;

            // open a resource to grab data from the Internet.
            using (var webClient = new WebClient())
            {
                // get our key.
                string key = System.IO.File.ReadAllText("WeatherAPIKey.txt");

                // read the weather data.
                string weatherJSON = webClient.DownloadString("https://api.weatherbit.io/v2.0/current?&city=Cincinnati&country=USA&key=" + key);
                Weather weathers = Weather.FromJson(weatherJSON);
                // is it raining?
                long precip = 0;
                foreach(weatherfeed.Datum weather in weathers.Data)
                {
                    precip = weather.Precip;
                    if (precip < 1)
                    {
                        // no precip, we need to water.
                        ViewData["Weather"] = "Need to water";
                    } else
                    {
                        ViewData["Weather"] = "Don't need to water";
                    }
                }


                // get our plants that are thirsty.
                string plantsJSON = webClient.DownloadString("http://plantplaces.com/perl/mobile/viewplantsjsonarray.pl?WetTolerant=on");
                
                // put thirsty plants into collection.
                List <Plant> plants = Plant.FromJson(plantsJSON);
                // read all of the plants into a dictionary for quick access.
                IDictionary<long, Plant> allPlants = new Dictionary<long, Plant>();
                foreach(Plant plant in plants)
                {
                    allPlants.Add(plant.Id, plant);
                }

                // grab the raw JSON data
                String specimenJSON = webClient.DownloadString("https://www.plantplaces.com/perl/mobile/viewspecimenlocations.pl?Lat=39.14455075&Lng=-84.5093939666667&Range=0.5&Source=location&Version=2");
                // read the JSON data, convert it to objects.
                // This was generated by QuickType.
                SpecimenCollection specimenCollection = specimenfeed.SpecimenCollection.FromJson(specimenJSON);
                // get the raw list of specimesn from the specimen collection.
                List < Specimen > specimens = specimenCollection.Specimens;
                List<Specimen> waterMeSpecimens = new List<Specimen>();
                foreach(Specimen specimen in specimens)
                {
                    if (allPlants.ContainsKey(specimen.PlantId))
                    {
                        // add to our collection of water loving plants.
                        waterMeSpecimens.Add(specimen);
                    }
                }
                // make the specimens available to our cshtml page.
                ViewData["Specimens"] = waterMeSpecimens;

            }

        }
    }
}
